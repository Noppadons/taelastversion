generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  USER
}
model User {
  id              String    @id @default(cuid())
  username        String    @unique
  email           String    @unique
  password        String
  profileImageUrl String?
  role            Role      @default(USER)
  isVerified      Boolean   @default(false)
  verificationToken String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  comments        Comment[]
}
model Comment {
  id              Int          @id @default(autoincrement())
  text            String
  createdAt       DateTime     @default(now())
  author          User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  newsArticle     NewsArticle? @relation(fields: [newsArticleId], references: [id], onDelete: Cascade)
  newsArticleId   Int?
  metaGuide       MetaGuide?   @relation(fields: [metaGuideId], references: [id], onDelete: Cascade)
  metaGuideId     Int?
}
model NewsArticle {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    @db.Text
  imageUrl    String?
  author      String    @default("TAE-ESPORT")
  publishedAt DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
}
model MetaGuide {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    @db.Text
  author      String    @default("TAE Analysis")
  publishedAt DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  gameId      Int
  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  comments    Comment[]
}
model Game {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  imageUrl    String?
  teams       Team[]
  metaGuides  MetaGuide[]
  playerStats PlayerStat[]
}
model Team {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  logoUrl     String?
  description String?  @db.Text
  gameId      Int
  game        Game     @relation(fields: [gameId], references: [id])
  players     Player[]
}
model Player {
  id        Int          @id @default(autoincrement())
  nickname  String
  realName  String?
  imageUrl  String?
  role      String?
  teamId    Int
  team      Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  stats     PlayerStat[]
}
model PlayerStat {
  id        Int    @id @default(autoincrement())
  stats     Json
  player    Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  Int
  game      Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    Int
  @@unique([playerId, gameId])
}